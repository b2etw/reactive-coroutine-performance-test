/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 196.0, "minX": 0.0, "maxY": 2061.0, "series": [{"data": [[0.0, 196.0], [0.1, 197.0], [0.2, 197.0], [0.3, 197.0], [0.4, 197.0], [0.5, 197.0], [0.6, 197.0], [0.7, 197.0], [0.8, 197.0], [0.9, 197.0], [1.0, 197.0], [1.1, 197.0], [1.2, 197.0], [1.3, 197.0], [1.4, 197.0], [1.5, 197.0], [1.6, 198.0], [1.7, 198.0], [1.8, 198.0], [1.9, 198.0], [2.0, 198.0], [2.1, 198.0], [2.2, 198.0], [2.3, 198.0], [2.4, 198.0], [2.5, 198.0], [2.6, 198.0], [2.7, 198.0], [2.8, 198.0], [2.9, 198.0], [3.0, 198.0], [3.1, 198.0], [3.2, 198.0], [3.3, 198.0], [3.4, 198.0], [3.5, 198.0], [3.6, 198.0], [3.7, 198.0], [3.8, 198.0], [3.9, 198.0], [4.0, 199.0], [4.1, 199.0], [4.2, 199.0], [4.3, 199.0], [4.4, 199.0], [4.5, 199.0], [4.6, 199.0], [4.7, 199.0], [4.8, 199.0], [4.9, 199.0], [5.0, 199.0], [5.1, 199.0], [5.2, 199.0], [5.3, 199.0], [5.4, 199.0], [5.5, 199.0], [5.6, 200.0], [5.7, 200.0], [5.8, 200.0], [5.9, 200.0], [6.0, 200.0], [6.1, 200.0], [6.2, 200.0], [6.3, 201.0], [6.4, 201.0], [6.5, 201.0], [6.6, 201.0], [6.7, 201.0], [6.8, 202.0], [6.9, 202.0], [7.0, 202.0], [7.1, 202.0], [7.2, 202.0], [7.3, 203.0], [7.4, 203.0], [7.5, 204.0], [7.6, 204.0], [7.7, 204.0], [7.8, 205.0], [7.9, 205.0], [8.0, 206.0], [8.1, 206.0], [8.2, 207.0], [8.3, 208.0], [8.4, 209.0], [8.5, 209.0], [8.6, 210.0], [8.7, 210.0], [8.8, 210.0], [8.9, 211.0], [9.0, 212.0], [9.1, 212.0], [9.2, 213.0], [9.3, 214.0], [9.4, 214.0], [9.5, 215.0], [9.6, 216.0], [9.7, 217.0], [9.8, 218.0], [9.9, 218.0], [10.0, 219.0], [10.1, 220.0], [10.2, 221.0], [10.3, 221.0], [10.4, 222.0], [10.5, 222.0], [10.6, 222.0], [10.7, 223.0], [10.8, 224.0], [10.9, 225.0], [11.0, 225.0], [11.1, 225.0], [11.2, 226.0], [11.3, 227.0], [11.4, 227.0], [11.5, 228.0], [11.6, 228.0], [11.7, 229.0], [11.8, 229.0], [11.9, 229.0], [12.0, 230.0], [12.1, 230.0], [12.2, 230.0], [12.3, 231.0], [12.4, 231.0], [12.5, 232.0], [12.6, 232.0], [12.7, 232.0], [12.8, 233.0], [12.9, 233.0], [13.0, 234.0], [13.1, 234.0], [13.2, 235.0], [13.3, 235.0], [13.4, 236.0], [13.5, 236.0], [13.6, 237.0], [13.7, 237.0], [13.8, 238.0], [13.9, 238.0], [14.0, 239.0], [14.1, 239.0], [14.2, 240.0], [14.3, 241.0], [14.4, 242.0], [14.5, 242.0], [14.6, 243.0], [14.7, 244.0], [14.8, 245.0], [14.9, 245.0], [15.0, 246.0], [15.1, 246.0], [15.2, 247.0], [15.3, 247.0], [15.4, 248.0], [15.5, 249.0], [15.6, 249.0], [15.7, 250.0], [15.8, 251.0], [15.9, 251.0], [16.0, 252.0], [16.1, 253.0], [16.2, 254.0], [16.3, 254.0], [16.4, 255.0], [16.5, 256.0], [16.6, 257.0], [16.7, 257.0], [16.8, 258.0], [16.9, 258.0], [17.0, 259.0], [17.1, 259.0], [17.2, 260.0], [17.3, 261.0], [17.4, 261.0], [17.5, 262.0], [17.6, 262.0], [17.7, 263.0], [17.8, 264.0], [17.9, 264.0], [18.0, 265.0], [18.1, 266.0], [18.2, 266.0], [18.3, 267.0], [18.4, 267.0], [18.5, 268.0], [18.6, 269.0], [18.7, 269.0], [18.8, 270.0], [18.9, 270.0], [19.0, 271.0], [19.1, 271.0], [19.2, 272.0], [19.3, 273.0], [19.4, 274.0], [19.5, 274.0], [19.6, 275.0], [19.7, 276.0], [19.8, 277.0], [19.9, 277.0], [20.0, 278.0], [20.1, 279.0], [20.2, 279.0], [20.3, 280.0], [20.4, 281.0], [20.5, 281.0], [20.6, 282.0], [20.7, 283.0], [20.8, 284.0], [20.9, 284.0], [21.0, 285.0], [21.1, 285.0], [21.2, 286.0], [21.3, 287.0], [21.4, 288.0], [21.5, 288.0], [21.6, 289.0], [21.7, 290.0], [21.8, 291.0], [21.9, 292.0], [22.0, 293.0], [22.1, 293.0], [22.2, 294.0], [22.3, 295.0], [22.4, 296.0], [22.5, 296.0], [22.6, 297.0], [22.7, 297.0], [22.8, 298.0], [22.9, 299.0], [23.0, 300.0], [23.1, 300.0], [23.2, 301.0], [23.3, 302.0], [23.4, 303.0], [23.5, 304.0], [23.6, 304.0], [23.7, 305.0], [23.8, 306.0], [23.9, 306.0], [24.0, 307.0], [24.1, 308.0], [24.2, 309.0], [24.3, 309.0], [24.4, 311.0], [24.5, 311.0], [24.6, 312.0], [24.7, 313.0], [24.8, 313.0], [24.9, 314.0], [25.0, 315.0], [25.1, 316.0], [25.2, 317.0], [25.3, 318.0], [25.4, 318.0], [25.5, 319.0], [25.6, 320.0], [25.7, 321.0], [25.8, 322.0], [25.9, 323.0], [26.0, 324.0], [26.1, 325.0], [26.2, 326.0], [26.3, 326.0], [26.4, 327.0], [26.5, 328.0], [26.6, 329.0], [26.7, 330.0], [26.8, 330.0], [26.9, 331.0], [27.0, 332.0], [27.1, 333.0], [27.2, 334.0], [27.3, 335.0], [27.4, 336.0], [27.5, 337.0], [27.6, 338.0], [27.7, 339.0], [27.8, 340.0], [27.9, 340.0], [28.0, 342.0], [28.1, 342.0], [28.2, 343.0], [28.3, 345.0], [28.4, 346.0], [28.5, 346.0], [28.6, 347.0], [28.7, 349.0], [28.8, 350.0], [28.9, 351.0], [29.0, 352.0], [29.1, 353.0], [29.2, 354.0], [29.3, 355.0], [29.4, 356.0], [29.5, 358.0], [29.6, 359.0], [29.7, 360.0], [29.8, 361.0], [29.9, 363.0], [30.0, 364.0], [30.1, 365.0], [30.2, 366.0], [30.3, 368.0], [30.4, 368.0], [30.5, 369.0], [30.6, 371.0], [30.7, 372.0], [30.8, 373.0], [30.9, 374.0], [31.0, 376.0], [31.1, 377.0], [31.2, 378.0], [31.3, 379.0], [31.4, 380.0], [31.5, 382.0], [31.6, 383.0], [31.7, 384.0], [31.8, 385.0], [31.9, 386.0], [32.0, 387.0], [32.1, 389.0], [32.2, 390.0], [32.3, 391.0], [32.4, 392.0], [32.5, 393.0], [32.6, 394.0], [32.7, 395.0], [32.8, 396.0], [32.9, 397.0], [33.0, 398.0], [33.1, 400.0], [33.2, 401.0], [33.3, 402.0], [33.4, 403.0], [33.5, 404.0], [33.6, 405.0], [33.7, 407.0], [33.8, 409.0], [33.9, 410.0], [34.0, 411.0], [34.1, 412.0], [34.2, 413.0], [34.3, 414.0], [34.4, 416.0], [34.5, 417.0], [34.6, 418.0], [34.7, 419.0], [34.8, 420.0], [34.9, 421.0], [35.0, 423.0], [35.1, 424.0], [35.2, 425.0], [35.3, 426.0], [35.4, 427.0], [35.5, 428.0], [35.6, 429.0], [35.7, 430.0], [35.8, 431.0], [35.9, 432.0], [36.0, 433.0], [36.1, 434.0], [36.2, 435.0], [36.3, 436.0], [36.4, 437.0], [36.5, 438.0], [36.6, 439.0], [36.7, 440.0], [36.8, 441.0], [36.9, 443.0], [37.0, 444.0], [37.1, 445.0], [37.2, 446.0], [37.3, 447.0], [37.4, 448.0], [37.5, 449.0], [37.6, 450.0], [37.7, 451.0], [37.8, 452.0], [37.9, 454.0], [38.0, 455.0], [38.1, 456.0], [38.2, 457.0], [38.3, 459.0], [38.4, 461.0], [38.5, 462.0], [38.6, 463.0], [38.7, 464.0], [38.8, 465.0], [38.9, 466.0], [39.0, 467.0], [39.1, 469.0], [39.2, 470.0], [39.3, 471.0], [39.4, 473.0], [39.5, 473.0], [39.6, 475.0], [39.7, 477.0], [39.8, 478.0], [39.9, 479.0], [40.0, 481.0], [40.1, 482.0], [40.2, 483.0], [40.3, 484.0], [40.4, 485.0], [40.5, 486.0], [40.6, 488.0], [40.7, 489.0], [40.8, 490.0], [40.9, 491.0], [41.0, 493.0], [41.1, 494.0], [41.2, 496.0], [41.3, 497.0], [41.4, 498.0], [41.5, 499.0], [41.6, 500.0], [41.7, 501.0], [41.8, 502.0], [41.9, 503.0], [42.0, 505.0], [42.1, 507.0], [42.2, 508.0], [42.3, 510.0], [42.4, 511.0], [42.5, 513.0], [42.6, 514.0], [42.7, 516.0], [42.8, 517.0], [42.9, 518.0], [43.0, 519.0], [43.1, 521.0], [43.2, 523.0], [43.3, 525.0], [43.4, 526.0], [43.5, 528.0], [43.6, 529.0], [43.7, 530.0], [43.8, 531.0], [43.9, 534.0], [44.0, 535.0], [44.1, 536.0], [44.2, 538.0], [44.3, 539.0], [44.4, 540.0], [44.5, 541.0], [44.6, 543.0], [44.7, 544.0], [44.8, 546.0], [44.9, 547.0], [45.0, 548.0], [45.1, 549.0], [45.2, 551.0], [45.3, 553.0], [45.4, 554.0], [45.5, 556.0], [45.6, 558.0], [45.7, 559.0], [45.8, 560.0], [45.9, 562.0], [46.0, 563.0], [46.1, 565.0], [46.2, 566.0], [46.3, 567.0], [46.4, 568.0], [46.5, 570.0], [46.6, 571.0], [46.7, 573.0], [46.8, 575.0], [46.9, 576.0], [47.0, 577.0], [47.1, 578.0], [47.2, 579.0], [47.3, 581.0], [47.4, 583.0], [47.5, 584.0], [47.6, 585.0], [47.7, 587.0], [47.8, 588.0], [47.9, 589.0], [48.0, 591.0], [48.1, 592.0], [48.2, 593.0], [48.3, 594.0], [48.4, 595.0], [48.5, 597.0], [48.6, 598.0], [48.7, 599.0], [48.8, 601.0], [48.9, 602.0], [49.0, 604.0], [49.1, 605.0], [49.2, 606.0], [49.3, 608.0], [49.4, 610.0], [49.5, 610.0], [49.6, 612.0], [49.7, 614.0], [49.8, 615.0], [49.9, 617.0], [50.0, 618.0], [50.1, 620.0], [50.2, 621.0], [50.3, 622.0], [50.4, 623.0], [50.5, 624.0], [50.6, 625.0], [50.7, 627.0], [50.8, 627.0], [50.9, 628.0], [51.0, 630.0], [51.1, 630.0], [51.2, 631.0], [51.3, 632.0], [51.4, 633.0], [51.5, 635.0], [51.6, 636.0], [51.7, 637.0], [51.8, 638.0], [51.9, 639.0], [52.0, 640.0], [52.1, 641.0], [52.2, 642.0], [52.3, 643.0], [52.4, 645.0], [52.5, 645.0], [52.6, 646.0], [52.7, 648.0], [52.8, 649.0], [52.9, 650.0], [53.0, 651.0], [53.1, 652.0], [53.2, 653.0], [53.3, 655.0], [53.4, 656.0], [53.5, 658.0], [53.6, 659.0], [53.7, 660.0], [53.8, 661.0], [53.9, 663.0], [54.0, 665.0], [54.1, 666.0], [54.2, 667.0], [54.3, 668.0], [54.4, 669.0], [54.5, 670.0], [54.6, 672.0], [54.7, 673.0], [54.8, 673.0], [54.9, 675.0], [55.0, 675.0], [55.1, 676.0], [55.2, 677.0], [55.3, 678.0], [55.4, 679.0], [55.5, 680.0], [55.6, 681.0], [55.7, 682.0], [55.8, 683.0], [55.9, 684.0], [56.0, 685.0], [56.1, 686.0], [56.2, 687.0], [56.3, 688.0], [56.4, 689.0], [56.5, 690.0], [56.6, 691.0], [56.7, 692.0], [56.8, 692.0], [56.9, 693.0], [57.0, 694.0], [57.1, 695.0], [57.2, 696.0], [57.3, 696.0], [57.4, 698.0], [57.5, 699.0], [57.6, 700.0], [57.7, 701.0], [57.8, 702.0], [57.9, 703.0], [58.0, 704.0], [58.1, 705.0], [58.2, 706.0], [58.3, 708.0], [58.4, 709.0], [58.5, 710.0], [58.6, 711.0], [58.7, 712.0], [58.8, 713.0], [58.9, 715.0], [59.0, 716.0], [59.1, 717.0], [59.2, 718.0], [59.3, 718.0], [59.4, 719.0], [59.5, 720.0], [59.6, 721.0], [59.7, 721.0], [59.8, 722.0], [59.9, 723.0], [60.0, 724.0], [60.1, 724.0], [60.2, 725.0], [60.3, 726.0], [60.4, 727.0], [60.5, 727.0], [60.6, 728.0], [60.7, 729.0], [60.8, 729.0], [60.9, 730.0], [61.0, 731.0], [61.1, 732.0], [61.2, 732.0], [61.3, 734.0], [61.4, 734.0], [61.5, 735.0], [61.6, 737.0], [61.7, 737.0], [61.8, 738.0], [61.9, 739.0], [62.0, 740.0], [62.1, 741.0], [62.2, 742.0], [62.3, 743.0], [62.4, 743.0], [62.5, 744.0], [62.6, 745.0], [62.7, 746.0], [62.8, 747.0], [62.9, 748.0], [63.0, 748.0], [63.1, 749.0], [63.2, 749.0], [63.3, 750.0], [63.4, 751.0], [63.5, 751.0], [63.6, 752.0], [63.7, 754.0], [63.8, 755.0], [63.9, 756.0], [64.0, 757.0], [64.1, 758.0], [64.2, 759.0], [64.3, 760.0], [64.4, 761.0], [64.5, 762.0], [64.6, 763.0], [64.7, 763.0], [64.8, 764.0], [64.9, 765.0], [65.0, 766.0], [65.1, 767.0], [65.2, 768.0], [65.3, 769.0], [65.4, 770.0], [65.5, 771.0], [65.6, 771.0], [65.7, 772.0], [65.8, 773.0], [65.9, 773.0], [66.0, 774.0], [66.1, 775.0], [66.2, 776.0], [66.3, 776.0], [66.4, 777.0], [66.5, 778.0], [66.6, 779.0], [66.7, 780.0], [66.8, 780.0], [66.9, 781.0], [67.0, 782.0], [67.1, 783.0], [67.2, 783.0], [67.3, 784.0], [67.4, 785.0], [67.5, 785.0], [67.6, 786.0], [67.7, 786.0], [67.8, 787.0], [67.9, 788.0], [68.0, 788.0], [68.1, 789.0], [68.2, 790.0], [68.3, 791.0], [68.4, 792.0], [68.5, 792.0], [68.6, 793.0], [68.7, 794.0], [68.8, 794.0], [68.9, 795.0], [69.0, 796.0], [69.1, 797.0], [69.2, 797.0], [69.3, 798.0], [69.4, 798.0], [69.5, 799.0], [69.6, 800.0], [69.7, 800.0], [69.8, 801.0], [69.9, 802.0], [70.0, 803.0], [70.1, 804.0], [70.2, 805.0], [70.3, 806.0], [70.4, 807.0], [70.5, 808.0], [70.6, 808.0], [70.7, 809.0], [70.8, 811.0], [70.9, 811.0], [71.0, 812.0], [71.1, 813.0], [71.2, 814.0], [71.3, 815.0], [71.4, 815.0], [71.5, 816.0], [71.6, 817.0], [71.7, 818.0], [71.8, 819.0], [71.9, 819.0], [72.0, 820.0], [72.1, 821.0], [72.2, 821.0], [72.3, 823.0], [72.4, 823.0], [72.5, 824.0], [72.6, 825.0], [72.7, 826.0], [72.8, 827.0], [72.9, 827.0], [73.0, 828.0], [73.1, 829.0], [73.2, 830.0], [73.3, 831.0], [73.4, 832.0], [73.5, 832.0], [73.6, 833.0], [73.7, 834.0], [73.8, 835.0], [73.9, 836.0], [74.0, 837.0], [74.1, 837.0], [74.2, 838.0], [74.3, 839.0], [74.4, 840.0], [74.5, 841.0], [74.6, 842.0], [74.7, 842.0], [74.8, 843.0], [74.9, 844.0], [75.0, 844.0], [75.1, 845.0], [75.2, 846.0], [75.3, 847.0], [75.4, 848.0], [75.5, 849.0], [75.6, 850.0], [75.7, 851.0], [75.8, 851.0], [75.9, 852.0], [76.0, 854.0], [76.1, 855.0], [76.2, 856.0], [76.3, 857.0], [76.4, 858.0], [76.5, 859.0], [76.6, 861.0], [76.7, 861.0], [76.8, 862.0], [76.9, 863.0], [77.0, 864.0], [77.1, 865.0], [77.2, 866.0], [77.3, 868.0], [77.4, 868.0], [77.5, 869.0], [77.6, 870.0], [77.7, 872.0], [77.8, 873.0], [77.9, 874.0], [78.0, 875.0], [78.1, 876.0], [78.2, 877.0], [78.3, 879.0], [78.4, 880.0], [78.5, 881.0], [78.6, 882.0], [78.7, 883.0], [78.8, 884.0], [78.9, 885.0], [79.0, 886.0], [79.1, 887.0], [79.2, 889.0], [79.3, 890.0], [79.4, 891.0], [79.5, 892.0], [79.6, 893.0], [79.7, 895.0], [79.8, 896.0], [79.9, 898.0], [80.0, 900.0], [80.1, 901.0], [80.2, 902.0], [80.3, 904.0], [80.4, 905.0], [80.5, 908.0], [80.6, 910.0], [80.7, 912.0], [80.8, 914.0], [80.9, 916.0], [81.0, 918.0], [81.1, 921.0], [81.2, 922.0], [81.3, 924.0], [81.4, 926.0], [81.5, 928.0], [81.6, 931.0], [81.7, 933.0], [81.8, 935.0], [81.9, 937.0], [82.0, 939.0], [82.1, 941.0], [82.2, 944.0], [82.3, 947.0], [82.4, 949.0], [82.5, 952.0], [82.6, 955.0], [82.7, 958.0], [82.8, 963.0], [82.9, 967.0], [83.0, 971.0], [83.1, 975.0], [83.2, 980.0], [83.3, 985.0], [83.4, 991.0], [83.5, 996.0], [83.6, 1001.0], [83.7, 1006.0], [83.8, 1010.0], [83.9, 1014.0], [84.0, 1019.0], [84.1, 1024.0], [84.2, 1031.0], [84.3, 1036.0], [84.4, 1042.0], [84.5, 1048.0], [84.6, 1053.0], [84.7, 1059.0], [84.8, 1069.0], [84.9, 1072.0], [85.0, 1077.0], [85.1, 1085.0], [85.2, 1089.0], [85.3, 1093.0], [85.4, 1096.0], [85.5, 1104.0], [85.6, 1113.0], [85.7, 1118.0], [85.8, 1122.0], [85.9, 1131.0], [86.0, 1136.0], [86.1, 1141.0], [86.2, 1149.0], [86.3, 1158.0], [86.4, 1165.0], [86.5, 1170.0], [86.6, 1176.0], [86.7, 1183.0], [86.8, 1190.0], [86.9, 1194.0], [87.0, 1199.0], [87.1, 1205.0], [87.2, 1212.0], [87.3, 1217.0], [87.4, 1221.0], [87.5, 1227.0], [87.6, 1232.0], [87.7, 1237.0], [87.8, 1245.0], [87.9, 1250.0], [88.0, 1254.0], [88.1, 1260.0], [88.2, 1267.0], [88.3, 1271.0], [88.4, 1277.0], [88.5, 1282.0], [88.6, 1287.0], [88.7, 1292.0], [88.8, 1299.0], [88.9, 1306.0], [89.0, 1314.0], [89.1, 1320.0], [89.2, 1328.0], [89.3, 1333.0], [89.4, 1340.0], [89.5, 1348.0], [89.6, 1355.0], [89.7, 1361.0], [89.8, 1366.0], [89.9, 1369.0], [90.0, 1377.0], [90.1, 1381.0], [90.2, 1386.0], [90.3, 1390.0], [90.4, 1397.0], [90.5, 1405.0], [90.6, 1412.0], [90.7, 1417.0], [90.8, 1424.0], [90.9, 1430.0], [91.0, 1436.0], [91.1, 1443.0], [91.2, 1452.0], [91.3, 1459.0], [91.4, 1465.0], [91.5, 1470.0], [91.6, 1476.0], [91.7, 1483.0], [91.8, 1490.0], [91.9, 1493.0], [92.0, 1498.0], [92.1, 1502.0], [92.2, 1506.0], [92.3, 1512.0], [92.4, 1519.0], [92.5, 1524.0], [92.6, 1530.0], [92.7, 1534.0], [92.8, 1538.0], [92.9, 1544.0], [93.0, 1548.0], [93.1, 1551.0], [93.2, 1558.0], [93.3, 1564.0], [93.4, 1568.0], [93.5, 1572.0], [93.6, 1577.0], [93.7, 1580.0], [93.8, 1584.0], [93.9, 1588.0], [94.0, 1593.0], [94.1, 1598.0], [94.2, 1602.0], [94.3, 1606.0], [94.4, 1609.0], [94.5, 1612.0], [94.6, 1617.0], [94.7, 1621.0], [94.8, 1625.0], [94.9, 1627.0], [95.0, 1631.0], [95.1, 1635.0], [95.2, 1639.0], [95.3, 1642.0], [95.4, 1648.0], [95.5, 1653.0], [95.6, 1658.0], [95.7, 1661.0], [95.8, 1665.0], [95.9, 1668.0], [96.0, 1673.0], [96.1, 1677.0], [96.2, 1681.0], [96.3, 1685.0], [96.4, 1689.0], [96.5, 1693.0], [96.6, 1699.0], [96.7, 1705.0], [96.8, 1709.0], [96.9, 1713.0], [97.0, 1718.0], [97.1, 1723.0], [97.2, 1727.0], [97.3, 1733.0], [97.4, 1738.0], [97.5, 1743.0], [97.6, 1749.0], [97.7, 1752.0], [97.8, 1759.0], [97.9, 1764.0], [98.0, 1771.0], [98.1, 1777.0], [98.2, 1782.0], [98.3, 1788.0], [98.4, 1792.0], [98.5, 1796.0], [98.6, 1802.0], [98.7, 1808.0], [98.8, 1815.0], [98.9, 1821.0], [99.0, 1826.0], [99.1, 1838.0], [99.2, 1843.0], [99.3, 1855.0], [99.4, 1866.0], [99.5, 1879.0], [99.6, 1893.0], [99.7, 1909.0], [99.8, 1930.0], [99.9, 1963.0]], "isOverall": false, "label": "cpu/1/spring/mvc", "isController": false}, {"data": [[0.0, 1002.0], [0.1, 1002.0], [0.2, 1002.0], [0.3, 1002.0], [0.4, 1002.0], [0.5, 1002.0], [0.6, 1002.0], [0.7, 1002.0], [0.8, 1002.0], [0.9, 1002.0], [1.0, 1002.0], [1.1, 1002.0], [1.2, 1002.0], [1.3, 1002.0], [1.4, 1002.0], [1.5, 1002.0], [1.6, 1002.0], [1.7, 1002.0], [1.8, 1002.0], [1.9, 1002.0], [2.0, 1002.0], [2.1, 1002.0], [2.2, 1002.0], [2.3, 1002.0], [2.4, 1002.0], [2.5, 1002.0], [2.6, 1002.0], [2.7, 1002.0], [2.8, 1002.0], [2.9, 1002.0], [3.0, 1002.0], [3.1, 1002.0], [3.2, 1002.0], [3.3, 1002.0], [3.4, 1002.0], [3.5, 1002.0], [3.6, 1002.0], [3.7, 1002.0], [3.8, 1002.0], [3.9, 1002.0], [4.0, 1002.0], [4.1, 1002.0], [4.2, 1002.0], [4.3, 1002.0], [4.4, 1002.0], [4.5, 1002.0], [4.6, 1002.0], [4.7, 1002.0], [4.8, 1002.0], [4.9, 1002.0], [5.0, 1002.0], [5.1, 1002.0], [5.2, 1002.0], [5.3, 1002.0], [5.4, 1002.0], [5.5, 1002.0], [5.6, 1002.0], [5.7, 1002.0], [5.8, 1002.0], [5.9, 1002.0], [6.0, 1002.0], [6.1, 1002.0], [6.2, 1002.0], [6.3, 1002.0], [6.4, 1002.0], [6.5, 1002.0], [6.6, 1002.0], [6.7, 1002.0], [6.8, 1002.0], [6.9, 1002.0], [7.0, 1002.0], [7.1, 1002.0], [7.2, 1002.0], [7.3, 1002.0], [7.4, 1002.0], [7.5, 1002.0], [7.6, 1002.0], [7.7, 1002.0], [7.8, 1002.0], [7.9, 1002.0], [8.0, 1002.0], [8.1, 1002.0], [8.2, 1002.0], [8.3, 1002.0], [8.4, 1002.0], [8.5, 1002.0], [8.6, 1002.0], [8.7, 1002.0], [8.8, 1002.0], [8.9, 1002.0], [9.0, 1002.0], [9.1, 1002.0], [9.2, 1002.0], [9.3, 1002.0], [9.4, 1002.0], [9.5, 1002.0], [9.6, 1002.0], [9.7, 1002.0], [9.8, 1002.0], [9.9, 1002.0], [10.0, 1002.0], [10.1, 1002.0], [10.2, 1002.0], [10.3, 1002.0], [10.4, 1002.0], [10.5, 1002.0], [10.6, 1002.0], [10.7, 1002.0], [10.8, 1002.0], [10.9, 1002.0], [11.0, 1002.0], [11.1, 1002.0], [11.2, 1002.0], [11.3, 1002.0], [11.4, 1002.0], [11.5, 1002.0], [11.6, 1002.0], [11.7, 1002.0], [11.8, 1002.0], [11.9, 1002.0], [12.0, 1002.0], [12.1, 1002.0], [12.2, 1002.0], [12.3, 1002.0], [12.4, 1002.0], [12.5, 1002.0], [12.6, 1002.0], [12.7, 1002.0], [12.8, 1002.0], [12.9, 1002.0], [13.0, 1002.0], [13.1, 1002.0], [13.2, 1002.0], [13.3, 1002.0], [13.4, 1002.0], [13.5, 1002.0], [13.6, 1002.0], [13.7, 1002.0], [13.8, 1002.0], [13.9, 1002.0], [14.0, 1002.0], [14.1, 1002.0], [14.2, 1003.0], [14.3, 1003.0], [14.4, 1003.0], [14.5, 1003.0], [14.6, 1003.0], [14.7, 1003.0], [14.8, 1003.0], [14.9, 1003.0], [15.0, 1003.0], [15.1, 1003.0], [15.2, 1003.0], [15.3, 1003.0], [15.4, 1003.0], [15.5, 1003.0], [15.6, 1003.0], [15.7, 1003.0], [15.8, 1003.0], [15.9, 1003.0], [16.0, 1003.0], [16.1, 1003.0], [16.2, 1003.0], [16.3, 1003.0], [16.4, 1003.0], [16.5, 1003.0], [16.6, 1003.0], [16.7, 1003.0], [16.8, 1003.0], [16.9, 1003.0], [17.0, 1003.0], [17.1, 1003.0], [17.2, 1003.0], [17.3, 1003.0], [17.4, 1003.0], [17.5, 1003.0], [17.6, 1003.0], [17.7, 1003.0], [17.8, 1003.0], [17.9, 1003.0], [18.0, 1003.0], [18.1, 1003.0], [18.2, 1003.0], [18.3, 1003.0], [18.4, 1003.0], [18.5, 1003.0], [18.6, 1003.0], [18.7, 1003.0], [18.8, 1003.0], [18.9, 1003.0], [19.0, 1003.0], [19.1, 1003.0], [19.2, 1003.0], [19.3, 1003.0], [19.4, 1003.0], [19.5, 1003.0], [19.6, 1003.0], [19.7, 1003.0], [19.8, 1003.0], [19.9, 1003.0], [20.0, 1003.0], [20.1, 1003.0], [20.2, 1003.0], [20.3, 1003.0], [20.4, 1003.0], [20.5, 1003.0], [20.6, 1003.0], [20.7, 1003.0], [20.8, 1003.0], [20.9, 1003.0], [21.0, 1003.0], [21.1, 1003.0], [21.2, 1003.0], [21.3, 1003.0], [21.4, 1003.0], [21.5, 1003.0], [21.6, 1003.0], [21.7, 1003.0], [21.8, 1003.0], [21.9, 1003.0], [22.0, 1003.0], [22.1, 1003.0], [22.2, 1003.0], [22.3, 1003.0], [22.4, 1003.0], [22.5, 1003.0], [22.6, 1003.0], [22.7, 1003.0], [22.8, 1003.0], [22.9, 1003.0], [23.0, 1003.0], [23.1, 1003.0], [23.2, 1003.0], [23.3, 1003.0], [23.4, 1003.0], [23.5, 1003.0], [23.6, 1003.0], [23.7, 1003.0], [23.8, 1003.0], [23.9, 1003.0], [24.0, 1003.0], [24.1, 1003.0], [24.2, 1003.0], [24.3, 1003.0], [24.4, 1003.0], [24.5, 1003.0], [24.6, 1003.0], [24.7, 1003.0], [24.8, 1003.0], [24.9, 1003.0], [25.0, 1003.0], [25.1, 1003.0], [25.2, 1003.0], [25.3, 1003.0], [25.4, 1003.0], [25.5, 1003.0], [25.6, 1003.0], [25.7, 1003.0], [25.8, 1003.0], [25.9, 1003.0], [26.0, 1003.0], [26.1, 1003.0], [26.2, 1003.0], [26.3, 1003.0], [26.4, 1003.0], [26.5, 1003.0], [26.6, 1003.0], [26.7, 1003.0], [26.8, 1003.0], [26.9, 1003.0], [27.0, 1003.0], [27.1, 1003.0], [27.2, 1003.0], [27.3, 1003.0], [27.4, 1003.0], [27.5, 1003.0], [27.6, 1003.0], [27.7, 1003.0], [27.8, 1003.0], [27.9, 1003.0], [28.0, 1003.0], [28.1, 1003.0], [28.2, 1003.0], [28.3, 1003.0], [28.4, 1003.0], [28.5, 1003.0], [28.6, 1003.0], [28.7, 1003.0], [28.8, 1003.0], [28.9, 1003.0], [29.0, 1003.0], [29.1, 1003.0], [29.2, 1003.0], [29.3, 1003.0], [29.4, 1003.0], [29.5, 1003.0], [29.6, 1003.0], [29.7, 1003.0], [29.8, 1003.0], [29.9, 1003.0], [30.0, 1003.0], [30.1, 1003.0], [30.2, 1003.0], [30.3, 1003.0], [30.4, 1003.0], [30.5, 1003.0], [30.6, 1003.0], [30.7, 1003.0], [30.8, 1003.0], [30.9, 1003.0], [31.0, 1003.0], [31.1, 1003.0], [31.2, 1003.0], [31.3, 1003.0], [31.4, 1003.0], [31.5, 1003.0], [31.6, 1003.0], [31.7, 1003.0], [31.8, 1003.0], [31.9, 1003.0], [32.0, 1003.0], [32.1, 1003.0], [32.2, 1003.0], [32.3, 1003.0], [32.4, 1003.0], [32.5, 1003.0], [32.6, 1003.0], [32.7, 1003.0], [32.8, 1003.0], [32.9, 1003.0], [33.0, 1003.0], [33.1, 1003.0], [33.2, 1003.0], [33.3, 1003.0], [33.4, 1003.0], [33.5, 1003.0], [33.6, 1003.0], [33.7, 1003.0], [33.8, 1003.0], [33.9, 1003.0], [34.0, 1003.0], [34.1, 1003.0], [34.2, 1003.0], [34.3, 1003.0], [34.4, 1003.0], [34.5, 1003.0], [34.6, 1003.0], [34.7, 1003.0], [34.8, 1003.0], [34.9, 1003.0], [35.0, 1003.0], [35.1, 1003.0], [35.2, 1003.0], [35.3, 1003.0], [35.4, 1003.0], [35.5, 1003.0], [35.6, 1003.0], [35.7, 1003.0], [35.8, 1003.0], [35.9, 1003.0], [36.0, 1003.0], [36.1, 1003.0], [36.2, 1003.0], [36.3, 1003.0], [36.4, 1003.0], [36.5, 1003.0], [36.6, 1003.0], [36.7, 1003.0], [36.8, 1003.0], [36.9, 1003.0], [37.0, 1003.0], [37.1, 1003.0], [37.2, 1003.0], [37.3, 1003.0], [37.4, 1003.0], [37.5, 1003.0], [37.6, 1003.0], [37.7, 1003.0], [37.8, 1003.0], [37.9, 1003.0], [38.0, 1003.0], [38.1, 1003.0], [38.2, 1003.0], [38.3, 1003.0], [38.4, 1003.0], [38.5, 1003.0], [38.6, 1003.0], [38.7, 1003.0], [38.8, 1003.0], [38.9, 1003.0], [39.0, 1003.0], [39.1, 1003.0], [39.2, 1003.0], [39.3, 1003.0], [39.4, 1003.0], [39.5, 1003.0], [39.6, 1003.0], [39.7, 1003.0], [39.8, 1003.0], [39.9, 1003.0], [40.0, 1003.0], [40.1, 1003.0], [40.2, 1003.0], [40.3, 1003.0], [40.4, 1003.0], [40.5, 1003.0], [40.6, 1003.0], [40.7, 1003.0], [40.8, 1003.0], [40.9, 1003.0], [41.0, 1003.0], [41.1, 1003.0], [41.2, 1003.0], [41.3, 1003.0], [41.4, 1003.0], [41.5, 1003.0], [41.6, 1003.0], [41.7, 1003.0], [41.8, 1003.0], [41.9, 1003.0], [42.0, 1003.0], [42.1, 1003.0], [42.2, 1003.0], [42.3, 1003.0], [42.4, 1003.0], [42.5, 1003.0], [42.6, 1003.0], [42.7, 1003.0], [42.8, 1003.0], [42.9, 1003.0], [43.0, 1003.0], [43.1, 1003.0], [43.2, 1003.0], [43.3, 1003.0], [43.4, 1003.0], [43.5, 1003.0], [43.6, 1003.0], [43.7, 1003.0], [43.8, 1003.0], [43.9, 1003.0], [44.0, 1003.0], [44.1, 1003.0], [44.2, 1003.0], [44.3, 1003.0], [44.4, 1003.0], [44.5, 1003.0], [44.6, 1003.0], [44.7, 1003.0], [44.8, 1003.0], [44.9, 1003.0], [45.0, 1003.0], [45.1, 1003.0], [45.2, 1003.0], [45.3, 1003.0], [45.4, 1003.0], [45.5, 1003.0], [45.6, 1003.0], [45.7, 1003.0], [45.8, 1003.0], [45.9, 1003.0], [46.0, 1003.0], [46.1, 1003.0], [46.2, 1003.0], [46.3, 1003.0], [46.4, 1003.0], [46.5, 1003.0], [46.6, 1003.0], [46.7, 1003.0], [46.8, 1003.0], [46.9, 1003.0], [47.0, 1003.0], [47.1, 1003.0], [47.2, 1003.0], [47.3, 1003.0], [47.4, 1003.0], [47.5, 1003.0], [47.6, 1003.0], [47.7, 1003.0], [47.8, 1003.0], [47.9, 1003.0], [48.0, 1003.0], [48.1, 1003.0], [48.2, 1003.0], [48.3, 1003.0], [48.4, 1003.0], [48.5, 1003.0], [48.6, 1003.0], [48.7, 1003.0], [48.8, 1003.0], [48.9, 1003.0], [49.0, 1003.0], [49.1, 1003.0], [49.2, 1003.0], [49.3, 1003.0], [49.4, 1003.0], [49.5, 1003.0], [49.6, 1003.0], [49.7, 1003.0], [49.8, 1003.0], [49.9, 1003.0], [50.0, 1003.0], [50.1, 1003.0], [50.2, 1003.0], [50.3, 1003.0], [50.4, 1003.0], [50.5, 1003.0], [50.6, 1003.0], [50.7, 1003.0], [50.8, 1003.0], [50.9, 1003.0], [51.0, 1003.0], [51.1, 1003.0], [51.2, 1003.0], [51.3, 1003.0], [51.4, 1003.0], [51.5, 1003.0], [51.6, 1003.0], [51.7, 1003.0], [51.8, 1003.0], [51.9, 1003.0], [52.0, 1003.0], [52.1, 1003.0], [52.2, 1003.0], [52.3, 1003.0], [52.4, 1003.0], [52.5, 1003.0], [52.6, 1003.0], [52.7, 1003.0], [52.8, 1003.0], [52.9, 1003.0], [53.0, 1003.0], [53.1, 1003.0], [53.2, 1003.0], [53.3, 1003.0], [53.4, 1003.0], [53.5, 1003.0], [53.6, 1003.0], [53.7, 1003.0], [53.8, 1003.0], [53.9, 1003.0], [54.0, 1003.0], [54.1, 1003.0], [54.2, 1003.0], [54.3, 1003.0], [54.4, 1003.0], [54.5, 1003.0], [54.6, 1003.0], [54.7, 1003.0], [54.8, 1003.0], [54.9, 1003.0], [55.0, 1003.0], [55.1, 1003.0], [55.2, 1003.0], [55.3, 1003.0], [55.4, 1003.0], [55.5, 1003.0], [55.6, 1003.0], [55.7, 1003.0], [55.8, 1003.0], [55.9, 1003.0], [56.0, 1003.0], [56.1, 1003.0], [56.2, 1003.0], [56.3, 1003.0], [56.4, 1003.0], [56.5, 1003.0], [56.6, 1003.0], [56.7, 1003.0], [56.8, 1003.0], [56.9, 1003.0], [57.0, 1003.0], [57.1, 1003.0], [57.2, 1003.0], [57.3, 1003.0], [57.4, 1003.0], [57.5, 1003.0], [57.6, 1003.0], [57.7, 1003.0], [57.8, 1003.0], [57.9, 1003.0], [58.0, 1003.0], [58.1, 1003.0], [58.2, 1003.0], [58.3, 1003.0], [58.4, 1003.0], [58.5, 1003.0], [58.6, 1003.0], [58.7, 1003.0], [58.8, 1003.0], [58.9, 1003.0], [59.0, 1003.0], [59.1, 1003.0], [59.2, 1003.0], [59.3, 1003.0], [59.4, 1003.0], [59.5, 1003.0], [59.6, 1003.0], [59.7, 1003.0], [59.8, 1003.0], [59.9, 1003.0], [60.0, 1003.0], [60.1, 1003.0], [60.2, 1003.0], [60.3, 1003.0], [60.4, 1003.0], [60.5, 1003.0], [60.6, 1003.0], [60.7, 1003.0], [60.8, 1003.0], [60.9, 1003.0], [61.0, 1003.0], [61.1, 1003.0], [61.2, 1003.0], [61.3, 1003.0], [61.4, 1003.0], [61.5, 1003.0], [61.6, 1003.0], [61.7, 1003.0], [61.8, 1003.0], [61.9, 1003.0], [62.0, 1003.0], [62.1, 1003.0], [62.2, 1003.0], [62.3, 1003.0], [62.4, 1003.0], [62.5, 1003.0], [62.6, 1003.0], [62.7, 1003.0], [62.8, 1003.0], [62.9, 1003.0], [63.0, 1003.0], [63.1, 1003.0], [63.2, 1003.0], [63.3, 1003.0], [63.4, 1003.0], [63.5, 1003.0], [63.6, 1003.0], [63.7, 1003.0], [63.8, 1003.0], [63.9, 1003.0], [64.0, 1003.0], [64.1, 1003.0], [64.2, 1003.0], [64.3, 1003.0], [64.4, 1003.0], [64.5, 1003.0], [64.6, 1003.0], [64.7, 1003.0], [64.8, 1003.0], [64.9, 1003.0], [65.0, 1003.0], [65.1, 1003.0], [65.2, 1003.0], [65.3, 1003.0], [65.4, 1003.0], [65.5, 1003.0], [65.6, 1003.0], [65.7, 1003.0], [65.8, 1003.0], [65.9, 1003.0], [66.0, 1003.0], [66.1, 1003.0], [66.2, 1003.0], [66.3, 1003.0], [66.4, 1003.0], [66.5, 1003.0], [66.6, 1003.0], [66.7, 1003.0], [66.8, 1003.0], [66.9, 1003.0], [67.0, 1003.0], [67.1, 1003.0], [67.2, 1003.0], [67.3, 1003.0], [67.4, 1003.0], [67.5, 1003.0], [67.6, 1003.0], [67.7, 1003.0], [67.8, 1003.0], [67.9, 1003.0], [68.0, 1003.0], [68.1, 1003.0], [68.2, 1003.0], [68.3, 1003.0], [68.4, 1003.0], [68.5, 1003.0], [68.6, 1003.0], [68.7, 1003.0], [68.8, 1003.0], [68.9, 1003.0], [69.0, 1003.0], [69.1, 1003.0], [69.2, 1003.0], [69.3, 1003.0], [69.4, 1003.0], [69.5, 1003.0], [69.6, 1003.0], [69.7, 1003.0], [69.8, 1003.0], [69.9, 1003.0], [70.0, 1003.0], [70.1, 1003.0], [70.2, 1003.0], [70.3, 1003.0], [70.4, 1003.0], [70.5, 1003.0], [70.6, 1003.0], [70.7, 1003.0], [70.8, 1003.0], [70.9, 1003.0], [71.0, 1003.0], [71.1, 1003.0], [71.2, 1003.0], [71.3, 1003.0], [71.4, 1003.0], [71.5, 1003.0], [71.6, 1003.0], [71.7, 1003.0], [71.8, 1003.0], [71.9, 1003.0], [72.0, 1003.0], [72.1, 1003.0], [72.2, 1003.0], [72.3, 1003.0], [72.4, 1003.0], [72.5, 1003.0], [72.6, 1003.0], [72.7, 1003.0], [72.8, 1003.0], [72.9, 1003.0], [73.0, 1003.0], [73.1, 1003.0], [73.2, 1003.0], [73.3, 1003.0], [73.4, 1003.0], [73.5, 1003.0], [73.6, 1003.0], [73.7, 1003.0], [73.8, 1003.0], [73.9, 1003.0], [74.0, 1003.0], [74.1, 1004.0], [74.2, 1004.0], [74.3, 1004.0], [74.4, 1004.0], [74.5, 1004.0], [74.6, 1004.0], [74.7, 1004.0], [74.8, 1004.0], [74.9, 1004.0], [75.0, 1004.0], [75.1, 1004.0], [75.2, 1004.0], [75.3, 1004.0], [75.4, 1004.0], [75.5, 1004.0], [75.6, 1004.0], [75.7, 1004.0], [75.8, 1004.0], [75.9, 1004.0], [76.0, 1004.0], [76.1, 1004.0], [76.2, 1004.0], [76.3, 1004.0], [76.4, 1004.0], [76.5, 1004.0], [76.6, 1004.0], [76.7, 1004.0], [76.8, 1004.0], [76.9, 1004.0], [77.0, 1004.0], [77.1, 1004.0], [77.2, 1004.0], [77.3, 1004.0], [77.4, 1004.0], [77.5, 1004.0], [77.6, 1004.0], [77.7, 1004.0], [77.8, 1004.0], [77.9, 1004.0], [78.0, 1004.0], [78.1, 1004.0], [78.2, 1004.0], [78.3, 1004.0], [78.4, 1004.0], [78.5, 1004.0], [78.6, 1004.0], [78.7, 1004.0], [78.8, 1004.0], [78.9, 1004.0], [79.0, 1004.0], [79.1, 1004.0], [79.2, 1004.0], [79.3, 1004.0], [79.4, 1004.0], [79.5, 1004.0], [79.6, 1004.0], [79.7, 1004.0], [79.8, 1004.0], [79.9, 1004.0], [80.0, 1004.0], [80.1, 1004.0], [80.2, 1004.0], [80.3, 1004.0], [80.4, 1004.0], [80.5, 1004.0], [80.6, 1004.0], [80.7, 1004.0], [80.8, 1004.0], [80.9, 1004.0], [81.0, 1004.0], [81.1, 1004.0], [81.2, 1004.0], [81.3, 1004.0], [81.4, 1004.0], [81.5, 1004.0], [81.6, 1004.0], [81.7, 1004.0], [81.8, 1004.0], [81.9, 1004.0], [82.0, 1004.0], [82.1, 1004.0], [82.2, 1004.0], [82.3, 1004.0], [82.4, 1004.0], [82.5, 1004.0], [82.6, 1004.0], [82.7, 1004.0], [82.8, 1004.0], [82.9, 1004.0], [83.0, 1004.0], [83.1, 1004.0], [83.2, 1004.0], [83.3, 1004.0], [83.4, 1004.0], [83.5, 1004.0], [83.6, 1004.0], [83.7, 1004.0], [83.8, 1004.0], [83.9, 1004.0], [84.0, 1004.0], [84.1, 1004.0], [84.2, 1004.0], [84.3, 1004.0], [84.4, 1004.0], [84.5, 1004.0], [84.6, 1004.0], [84.7, 1004.0], [84.8, 1004.0], [84.9, 1004.0], [85.0, 1004.0], [85.1, 1004.0], [85.2, 1004.0], [85.3, 1004.0], [85.4, 1004.0], [85.5, 1004.0], [85.6, 1004.0], [85.7, 1004.0], [85.8, 1004.0], [85.9, 1004.0], [86.0, 1004.0], [86.1, 1004.0], [86.2, 1004.0], [86.3, 1004.0], [86.4, 1004.0], [86.5, 1004.0], [86.6, 1004.0], [86.7, 1004.0], [86.8, 1004.0], [86.9, 1004.0], [87.0, 1004.0], [87.1, 1004.0], [87.2, 1004.0], [87.3, 1004.0], [87.4, 1004.0], [87.5, 1004.0], [87.6, 1004.0], [87.7, 1004.0], [87.8, 1004.0], [87.9, 1004.0], [88.0, 1004.0], [88.1, 1004.0], [88.2, 1004.0], [88.3, 1004.0], [88.4, 1004.0], [88.5, 1004.0], [88.6, 1004.0], [88.7, 1004.0], [88.8, 1004.0], [88.9, 1004.0], [89.0, 1004.0], [89.1, 1004.0], [89.2, 1004.0], [89.3, 1004.0], [89.4, 1004.0], [89.5, 1004.0], [89.6, 1004.0], [89.7, 1004.0], [89.8, 1004.0], [89.9, 1004.0], [90.0, 1004.0], [90.1, 1004.0], [90.2, 1004.0], [90.3, 1004.0], [90.4, 1004.0], [90.5, 1004.0], [90.6, 1004.0], [90.7, 1004.0], [90.8, 1004.0], [90.9, 1004.0], [91.0, 1004.0], [91.1, 1004.0], [91.2, 1004.0], [91.3, 1004.0], [91.4, 1004.0], [91.5, 1004.0], [91.6, 1004.0], [91.7, 1004.0], [91.8, 1004.0], [91.9, 1004.0], [92.0, 1004.0], [92.1, 1004.0], [92.2, 1004.0], [92.3, 1004.0], [92.4, 1005.0], [92.5, 1005.0], [92.6, 1005.0], [92.7, 1005.0], [92.8, 1005.0], [92.9, 1005.0], [93.0, 1005.0], [93.1, 1005.0], [93.2, 1005.0], [93.3, 1005.0], [93.4, 1005.0], [93.5, 1005.0], [93.6, 1005.0], [93.7, 1005.0], [93.8, 1005.0], [93.9, 1005.0], [94.0, 1005.0], [94.1, 1005.0], [94.2, 1005.0], [94.3, 1005.0], [94.4, 1005.0], [94.5, 1005.0], [94.6, 1005.0], [94.7, 1005.0], [94.8, 1005.0], [94.9, 1005.0], [95.0, 1005.0], [95.1, 1005.0], [95.2, 1005.0], [95.3, 1005.0], [95.4, 1005.0], [95.5, 1005.0], [95.6, 1005.0], [95.7, 1005.0], [95.8, 1005.0], [95.9, 1005.0], [96.0, 1005.0], [96.1, 1005.0], [96.2, 1005.0], [96.3, 1005.0], [96.4, 1005.0], [96.5, 1005.0], [96.6, 1005.0], [96.7, 1005.0], [96.8, 1005.0], [96.9, 1006.0], [97.0, 1006.0], [97.1, 1006.0], [97.2, 1006.0], [97.3, 1006.0], [97.4, 1006.0], [97.5, 1006.0], [97.6, 1006.0], [97.7, 1006.0], [97.8, 1006.0], [97.9, 1006.0], [98.0, 1006.0], [98.1, 1007.0], [98.2, 1007.0], [98.3, 1007.0], [98.4, 1007.0], [98.5, 1007.0], [98.6, 1008.0], [98.7, 1008.0], [98.8, 1008.0], [98.9, 1009.0], [99.0, 1009.0], [99.1, 1010.0], [99.2, 1013.0], [99.3, 1016.0], [99.4, 1019.0], [99.5, 1021.0], [99.6, 1024.0], [99.7, 1029.0], [99.8, 1034.0], [99.9, 1056.0], [100.0, 1333.0]], "isOverall": false, "label": "network/1/vertx/coroutine", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 5907.0, "series": [{"data": [[600.0, 2001.0], [700.0, 2704.0], [200.0, 3921.0], [800.0, 2343.0], [900.0, 808.0], [1000.0, 421.0], [1100.0, 354.0], [300.0, 2282.0], [1200.0, 405.0], [1300.0, 366.0], [1400.0, 362.0], [1500.0, 475.0], [100.0, 1251.0], [400.0, 1914.0], [1600.0, 555.0], [1700.0, 439.0], [1800.0, 248.0], [1900.0, 74.0], [500.0, 1609.0], [2000.0, 5.0]], "isOverall": false, "label": "cpu/1/spring/mvc", "isController": false}, {"data": [[1100.0, 1.0], [1300.0, 1.0], [1000.0, 5907.0]], "isOverall": false, "label": "network/1/vertx/coroutine", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 2000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1792.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 17266.0, "series": [{"data": [[0.0, 9388.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 17266.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1792.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 6.164556962025318, "minX": 1.62616272E12, "maxY": 50.0, "series": [{"data": [[1.62616836E12, 50.0], [1.62616806E12, 50.0], [1.62616284E12, 50.0], [1.62616272E12, 6.164556962025318], [1.62616776E12, 50.0], [1.62616374E12, 50.0], [1.62616788E12, 34.2770663562282], [1.62616362E12, 50.0], [1.62616758E12, 45.12279226240543], [1.62616302E12, 48.51094890510948], [1.62616848E12, 48.796545105566224], [1.62616818E12, 34.78207739307535], [1.6261629E12, 50.0], [1.6261683E12, 50.0], [1.6261638E12, 50.0], [1.626168E12, 50.0], [1.6261677E12, 50.0], [1.62616368E12, 50.0], [1.62616812E12, 50.0], [1.62616782E12, 48.746987951807235], [1.62616278E12, 41.7965554359526], [1.62616842E12, 50.0], [1.62616296E12, 50.0], [1.62616752E12, 10.31182795698925], [1.62616764E12, 50.0], [1.62616386E12, 42.43902439024393], [1.62616356E12, 40.007407407407435], [1.62616824E12, 43.994224422442294], [1.62616794E12, 50.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62616848E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 225.56521739130432, "minX": 1.0, "maxY": 1156.189655172414, "series": [{"data": [[2.0, 236.07692307692307], [3.0, 229.7435897435898], [4.0, 225.56521739130432], [5.0, 231.29166666666669], [6.0, 289.47916666666663], [7.0, 291.8913043478261], [8.0, 333.7291666666667], [9.0, 323.93617021276606], [10.0, 341.5882352941176], [11.0, 377.5740740740741], [12.0, 423.5909090909092], [13.0, 466.5531914893616], [14.0, 502.2], [15.0, 505.57446808510645], [16.0, 523.9285714285714], [17.0, 532.9999999999999], [18.0, 547.076923076923], [19.0, 562.0517241379313], [20.0, 590.0888888888887], [21.0, 573.9545454545454], [22.0, 621.2203389830507], [23.0, 638.657894736842], [24.0, 657.4827586206895], [25.0, 661.5227272727273], [26.0, 717.8983050847459], [27.0, 649.6222222222223], [28.0, 775.830188679245], [29.0, 748.9], [30.0, 673.9473684210526], [31.0, 871.1052631578951], [32.0, 745.6122448979593], [33.0, 841.5454545454543], [34.0, 848.1739130434783], [35.0, 815.0000000000001], [36.0, 923.4107142857142], [37.0, 857.9444444444441], [38.0, 888.9534883720933], [39.0, 925.5454545454548], [40.0, 982.1774193548388], [41.0, 951.1489361702128], [42.0, 839.6216216216218], [43.0, 1083.537037037037], [44.0, 1017.4363636363636], [45.0, 988.6956521739131], [46.0, 1031.9555555555555], [47.0, 1118.8800000000003], [48.0, 1156.189655172414], [49.0, 1056.5600000000004], [50.0, 674.5099000099027], [1.0, 306.5454545454545]], "isOverall": false, "label": "cpu/1/spring/mvc", "isController": false}, {"data": [[47.50419310467218, 675.265208324088]], "isOverall": false, "label": "cpu/1/spring/mvc-Aggregated", "isController": false}, {"data": [[2.0, 1003.5], [3.0, 1116.3333333333333], [4.0, 1012.5], [5.0, 1017.25], [6.0, 1007.75], [7.0, 1010.6666666666666], [8.0, 1007.7142857142857], [9.0, 1007.0], [10.0, 1009.6666666666667], [11.0, 1006.5000000000001], [12.0, 1007.4285714285713], [13.0, 1007.125], [14.0, 1005.5555555555555], [15.0, 1006.2], [16.0, 1008.5555555555555], [17.0, 1008.6363636363636], [18.0, 1007.4166666666667], [19.0, 1007.5454545454545], [20.0, 1006.8461538461539], [21.0, 1005.0769230769232], [22.0, 1005.1538461538461], [23.0, 1005.0], [24.0, 1005.0000000000001], [25.0, 1004.8666666666668], [26.0, 1004.5833333333333], [27.0, 1004.6875], [28.0, 1004.8461538461538], [29.0, 1005.5], [30.0, 1004.2727272727274], [31.0, 1006.923076923077], [32.0, 1004.7142857142857], [33.0, 1004.2], [34.0, 1004.3333333333334], [35.0, 1004.0714285714286], [36.0, 1003.9090909090909], [37.0, 1005.0], [38.0, 1004.0833333333334], [39.0, 1004.0769230769231], [40.0, 1004.0714285714284], [41.0, 1004.0769230769232], [42.0, 1004.1764705882354], [43.0, 1004.0], [44.0, 1004.1764705882351], [45.0, 1003.9090909090909], [46.0, 1003.7692307692308], [47.0, 1004.4375], [48.0, 1004.076923076923], [49.0, 1003.7500000000001], [50.0, 1003.2581662954715]], "isOverall": false, "label": "network/1/vertx/coroutine", "isController": false}, {"data": [[48.19207987815199, 1003.4983922829581]], "isOverall": false, "label": "network/1/vertx/coroutine-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 50.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 234.36666666666667, "minX": 1.62616272E12, "maxY": 5209.6, "series": [{"data": [[1.62616836E12, 5120.0], [1.62616806E12, 5124.266666666666], [1.62616284E12, 3844.266666666667], [1.62616272E12, 337.06666666666666], [1.62616776E12, 5120.0], [1.62616374E12, 2560.0], [1.62616788E12, 3665.0666666666666], [1.62616362E12, 2560.0], [1.62616758E12, 5073.066666666667], [1.62616302E12, 3507.2], [1.62616848E12, 4445.866666666667], [1.62616818E12, 2094.9333333333334], [1.6261629E12, 3831.4666666666667], [1.6261683E12, 5120.0], [1.6261638E12, 2560.0], [1.626168E12, 5120.0], [1.6261677E12, 5209.6], [1.62616368E12, 2560.0], [1.62616812E12, 5115.733333333334], [1.62616782E12, 4249.6], [1.62616278E12, 3963.733333333333], [1.62616842E12, 5120.0], [1.62616296E12, 3844.266666666667], [1.62616752E12, 793.6], [1.62616764E12, 5145.6], [1.62616386E12, 349.8666666666667], [1.62616356E12, 2016.0], [1.62616824E12, 5171.2], [1.62616794E12, 5141.333333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.62616836E12, 3560.0], [1.62616806E12, 3562.9666666666667], [1.62616284E12, 2672.9666666666667], [1.62616272E12, 234.36666666666667], [1.62616776E12, 3560.0], [1.62616374E12, 4180.0], [1.62616788E12, 2548.366666666667], [1.62616362E12, 4180.0], [1.62616758E12, 3527.366666666667], [1.62616302E12, 2438.6], [1.62616848E12, 3091.266666666667], [1.62616818E12, 1456.6333333333334], [1.6261629E12, 2664.0666666666666], [1.6261683E12, 3560.0], [1.6261638E12, 4180.0], [1.626168E12, 3560.0], [1.6261677E12, 3622.3], [1.62616368E12, 4180.0], [1.62616812E12, 3557.0333333333333], [1.62616782E12, 2954.8], [1.62616278E12, 2756.0333333333333], [1.62616842E12, 3560.0], [1.62616296E12, 2672.9666666666667], [1.62616752E12, 551.8], [1.62616764E12, 3577.8], [1.62616386E12, 571.2666666666667], [1.62616356E12, 3291.75], [1.62616824E12, 3595.6], [1.62616794E12, 3574.8333333333335]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62616848E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 239.2025316455696, "minX": 1.62616272E12, "maxY": 1618.0215588723054, "series": [{"data": [[1.62616836E12, 636.7766666666666], [1.62616806E12, 663.0208159866776], [1.626168E12, 663.2616666666662], [1.62616284E12, 267.4605993340733], [1.6261677E12, 688.993447993447], [1.62616812E12, 664.7331109257722], [1.62616272E12, 239.2025316455696], [1.62616782E12, 364.3373493975907], [1.62616278E12, 276.85037674919243], [1.62616776E12, 376.36999999999955], [1.62616842E12, 637.5558333333331], [1.62616788E12, 953.8684516880089], [1.62616296E12, 262.21420643729203], [1.62616758E12, 1516.987384356604], [1.62616302E12, 263.3527980535278], [1.62616848E12, 645.924184261037], [1.62616752E12, 447.38709677419365], [1.62616818E12, 572.8615071283099], [1.6261629E12, 267.0334075723828], [1.62616764E12, 1618.0215588723054], [1.6261683E12, 643.0450000000001], [1.62616824E12, 947.4925742574251], [1.62616794E12, 749.1195020746878]], "isOverall": false, "label": "cpu/1/spring/mvc", "isController": false}, {"data": [[1.62616362E12, 1003.3308333333333], [1.6261638E12, 1003.2599999999992], [1.62616368E12, 1003.2391666666673], [1.62616386E12, 1003.3780487804878], [1.62616356E12, 1005.0592592592591], [1.62616374E12, 1002.9508333333339]], "isOverall": false, "label": "network/1/vertx/coroutine", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62616848E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 238.58227848101274, "minX": 1.62616272E12, "maxY": 1614.805970149253, "series": [{"data": [[1.62616836E12, 633.5699999999997], [1.62616806E12, 660.0366361365524], [1.626168E12, 660.1525000000009], [1.62616284E12, 266.99112097669257], [1.6261677E12, 686.0819000819018], [1.62616812E12, 661.7064220183493], [1.62616272E12, 238.58227848101274], [1.62616782E12, 363.2670682730921], [1.62616278E12, 276.218514531755], [1.62616776E12, 375.07749999999993], [1.62616842E12, 634.3041666666663], [1.62616788E12, 950.7252619324795], [1.62616296E12, 261.8645948945616], [1.62616758E12, 1512.687132043735], [1.62616302E12, 262.9927007299267], [1.62616848E12, 643.0038387715929], [1.62616752E12, 444.9247311827958], [1.62616818E12, 570.5478615071287], [1.6261629E12, 266.7093541202673], [1.62616764E12, 1614.805970149253], [1.6261683E12, 640.0024999999995], [1.62616824E12, 943.2772277227724], [1.62616794E12, 745.5153526970954]], "isOverall": false, "label": "cpu/1/spring/mvc", "isController": false}, {"data": [[1.62616362E12, 1003.3066666666668], [1.6261638E12, 1003.2441666666676], [1.62616368E12, 1003.2175000000009], [1.62616386E12, 1003.34756097561], [1.62616356E12, 1005.0232804232807], [1.62616374E12, 1002.9383333333338]], "isOverall": false, "label": "network/1/vertx/coroutine", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62616848E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.41034195162635523, "minX": 1.62616272E12, "maxY": 1.253164556962025, "series": [{"data": [[1.62616836E12, 0.5608333333333326], [1.62616806E12, 0.44462947543713544], [1.626168E12, 0.428333333333333], [1.62616284E12, 0.5149833518312976], [1.6261677E12, 0.5503685503685504], [1.62616812E12, 0.41034195162635523], [1.62616272E12, 1.253164556962025], [1.62616782E12, 0.4578313253012049], [1.62616278E12, 0.6964477933261571], [1.62616776E12, 0.5008333333333322], [1.62616842E12, 0.45916666666666694], [1.62616788E12, 0.6810244470314314], [1.62616296E12, 0.5160932297447282], [1.62616758E12, 0.5769554247266604], [1.62616302E12, 0.47323600973235963], [1.62616848E12, 0.5115163147792705], [1.62616752E12, 0.8924731182795694], [1.62616818E12, 0.5723014256619149], [1.6261629E12, 0.5100222717149222], [1.62616764E12, 0.5373134328358217], [1.6261683E12, 0.45583333333333337], [1.62616824E12, 0.6056105610561042], [1.62616794E12, 0.46390041493775935]], "isOverall": false, "label": "cpu/1/spring/mvc", "isController": false}, {"data": [[1.62616362E12, 0.5058333333333338], [1.6261638E12, 0.5208333333333336], [1.62616368E12, 0.5091666666666665], [1.62616386E12, 0.49390243902439057], [1.62616356E12, 0.6973544973544976], [1.62616374E12, 0.5041666666666662]], "isOverall": false, "label": "network/1/vertx/coroutine", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62616848E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 196.0, "minX": 1.62616272E12, "maxY": 2061.0, "series": [{"data": [[1.62616836E12, 997.0], [1.62616806E12, 1014.0], [1.62616284E12, 547.0], [1.62616272E12, 380.0], [1.62616776E12, 716.0], [1.62616374E12, 1021.0], [1.62616788E12, 1645.0], [1.62616362E12, 1024.0], [1.62616758E12, 2061.0], [1.62616302E12, 514.0], [1.62616848E12, 1016.0], [1.62616818E12, 988.0], [1.6261629E12, 540.0], [1.6261683E12, 1003.0], [1.6261638E12, 1062.0], [1.626168E12, 1028.0], [1.6261677E12, 1509.0], [1.62616368E12, 1115.0], [1.62616812E12, 1010.0], [1.62616782E12, 685.0], [1.62616278E12, 552.0], [1.62616842E12, 1010.0], [1.62616296E12, 551.0], [1.62616752E12, 819.0], [1.62616764E12, 2000.0], [1.62616386E12, 1029.0], [1.62616356E12, 1333.0], [1.62616824E12, 1606.0], [1.62616794E12, 1392.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.62616836E12, 853.8000000000002], [1.62616806E12, 869.8], [1.62616284E12, 380.0], [1.62616272E12, 311.0], [1.62616776E12, 520.9000000000001], [1.62616374E12, 1003.0], [1.62616788E12, 1414.0], [1.62616362E12, 1004.0], [1.62616758E12, 1854.0], [1.62616302E12, 369.70000000000005], [1.62616848E12, 859.0], [1.62616818E12, 860.6], [1.6261629E12, 378.1], [1.6261683E12, 847.0], [1.6261638E12, 1004.0], [1.626168E12, 882.0], [1.6261677E12, 1196.3999999999999], [1.62616368E12, 1004.0], [1.62616812E12, 882.0], [1.62616782E12, 505.30000000000007], [1.62616278E12, 408.0], [1.62616842E12, 850.0], [1.62616296E12, 372.80000000000007], [1.62616752E12, 756.0], [1.62616764E12, 1792.0], [1.62616386E12, 1003.0], [1.62616356E12, 1006.0], [1.62616824E12, 1372.0], [1.62616794E12, 1036.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.62616836E12, 939.95], [1.62616806E12, 943.94], [1.62616284E12, 489.98], [1.62616272E12, 380.0], [1.62616776E12, 618.99], [1.62616374E12, 1004.99], [1.62616788E12, 1568.6], [1.62616362E12, 1005.0], [1.62616758E12, 1977.0], [1.62616302E12, 463.53999999999996], [1.62616848E12, 948.5699999999999], [1.62616818E12, 950.0799999999999], [1.6261629E12, 485.01], [1.6261683E12, 951.0], [1.6261638E12, 1015.9000000000001], [1.626168E12, 964.99], [1.6261677E12, 1410.78], [1.62616368E12, 1005.99], [1.62616812E12, 958.0], [1.62616782E12, 596.06], [1.62616278E12, 495.70000000000005], [1.62616842E12, 955.97], [1.62616296E12, 479.94000000000005], [1.62616752E12, 814.65], [1.62616764E12, 1924.4400000000005], [1.62616386E12, 1028.35], [1.62616356E12, 1019.54], [1.62616824E12, 1538.7399999999998], [1.62616794E12, 1256.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.62616836E12, 889.95], [1.62616806E12, 897.8999999999999], [1.62616284E12, 425.5999999999999], [1.62616272E12, 367.0], [1.62616776E12, 555.9000000000001], [1.62616374E12, 1004.0], [1.62616788E12, 1482.0], [1.62616362E12, 1004.0], [1.62616758E12, 1900.5], [1.62616302E12, 414.0], [1.62616848E12, 889.8499999999999], [1.62616818E12, 889.0], [1.6261629E12, 429.0999999999999], [1.6261683E12, 878.95], [1.6261638E12, 1004.0], [1.626168E12, 915.0], [1.6261677E12, 1268.6999999999996], [1.62616368E12, 1004.0], [1.62616812E12, 910.0], [1.62616782E12, 541.15], [1.62616278E12, 443.5], [1.62616842E12, 887.0], [1.62616296E12, 420.0], [1.62616752E12, 779.5], [1.62616764E12, 1837.6499999999999], [1.62616386E12, 1004.0], [1.62616356E12, 1008.0], [1.62616824E12, 1450.35], [1.62616794E12, 1118.1000000000001]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.62616836E12, 197.0], [1.62616806E12, 197.0], [1.62616284E12, 197.0], [1.62616272E12, 198.0], [1.62616776E12, 196.0], [1.62616374E12, 1002.0], [1.62616788E12, 197.0], [1.62616362E12, 1002.0], [1.62616758E12, 474.0], [1.62616302E12, 196.0], [1.62616848E12, 197.0], [1.62616818E12, 197.0], [1.6261629E12, 197.0], [1.6261683E12, 196.0], [1.6261638E12, 1002.0], [1.626168E12, 197.0], [1.6261677E12, 196.0], [1.62616368E12, 1002.0], [1.62616812E12, 196.0], [1.62616782E12, 196.0], [1.62616278E12, 197.0], [1.62616842E12, 196.0], [1.62616296E12, 196.0], [1.62616752E12, 197.0], [1.62616764E12, 1011.0], [1.62616386E12, 1002.0], [1.62616356E12, 1002.0], [1.62616824E12, 197.0], [1.62616794E12, 197.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.62616836E12, 678.0], [1.62616806E12, 722.0], [1.62616284E12, 242.0], [1.62616272E12, 215.0], [1.62616776E12, 371.5], [1.62616374E12, 1003.0], [1.62616788E12, 1054.0], [1.62616362E12, 1003.0], [1.62616758E12, 1593.0], [1.62616302E12, 245.0], [1.62616848E12, 692.0], [1.62616818E12, 646.0], [1.6261629E12, 244.5], [1.6261683E12, 691.0], [1.6261638E12, 1003.0], [1.626168E12, 723.5], [1.6261677E12, 644.0], [1.62616368E12, 1003.0], [1.62616812E12, 713.0], [1.62616782E12, 358.5], [1.62616278E12, 252.0], [1.62616842E12, 681.0], [1.62616296E12, 235.0], [1.62616752E12, 390.5], [1.62616764E12, 1633.0], [1.62616386E12, 1003.0], [1.62616356E12, 1004.0], [1.62616824E12, 945.5], [1.62616794E12, 776.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62616848E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 207.0, "minX": 2.0, "maxY": 1010.0, "series": [{"data": [[2.0, 243.0], [3.0, 207.0], [4.0, 1003.0], [5.0, 1010.0], [7.0, 1009.0], [8.0, 282.5], [9.0, 1008.0], [10.0, 676.0], [11.0, 219.0], [12.0, 227.0], [13.0, 266.5], [14.0, 307.0], [15.0, 326.0], [16.0, 704.5], [17.0, 740.0], [18.0, 609.5], [19.0, 712.0], [20.0, 1002.0], [21.0, 774.0], [22.0, 728.0], [23.0, 1003.0], [24.0, 1003.0], [25.0, 828.0], [26.0, 725.5], [27.0, 765.5], [28.0, 754.0], [29.0, 743.5], [30.0, 736.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 30.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 206.0, "minX": 2.0, "maxY": 1010.0, "series": [{"data": [[2.0, 240.0], [3.0, 206.0], [4.0, 1003.0], [5.0, 1010.0], [7.0, 1009.0], [8.0, 282.5], [9.0, 1008.0], [10.0, 676.0], [11.0, 219.0], [12.0, 227.0], [13.0, 266.0], [14.0, 307.0], [15.0, 326.0], [16.0, 701.0], [17.0, 734.5], [18.0, 605.0], [19.0, 708.0], [20.0, 1002.0], [21.0, 767.5], [22.0, 723.0], [23.0, 1003.0], [24.0, 1003.0], [25.0, 822.5], [26.0, 719.5], [27.0, 762.5], [28.0, 749.5], [29.0, 740.0], [30.0, 735.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 30.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.3333333333333333, "minX": 1.62616272E12, "maxY": 20.2, "series": [{"data": [[1.62616836E12, 20.0], [1.62616806E12, 20.0], [1.62616284E12, 15.0], [1.62616272E12, 1.3333333333333333], [1.62616776E12, 20.0], [1.62616374E12, 20.0], [1.62616788E12, 14.666666666666666], [1.62616362E12, 20.0], [1.62616758E12, 20.15], [1.62616302E12, 13.6], [1.62616848E12, 17.2], [1.62616818E12, 8.083333333333334], [1.6261629E12, 15.0], [1.6261683E12, 20.0], [1.6261638E12, 20.0], [1.626168E12, 20.0], [1.6261677E12, 20.0], [1.62616368E12, 20.0], [1.62616812E12, 20.0], [1.62616782E12, 16.5], [1.62616278E12, 15.566666666666666], [1.62616842E12, 20.0], [1.62616296E12, 15.0], [1.62616752E12, 3.316666666666667], [1.62616764E12, 20.0], [1.62616386E12, 2.45], [1.62616356E12, 16.033333333333335], [1.62616824E12, 20.2], [1.62616794E12, 20.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62616848E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.3166666666666667, "minX": 1.62616272E12, "maxY": 20.35, "series": [{"data": [[1.62616836E12, 20.0], [1.62616806E12, 20.016666666666666], [1.62616284E12, 15.016666666666667], [1.62616272E12, 1.3166666666666667], [1.62616776E12, 20.0], [1.62616374E12, 20.0], [1.62616788E12, 14.316666666666666], [1.62616362E12, 20.0], [1.62616758E12, 19.816666666666666], [1.62616302E12, 13.7], [1.62616848E12, 17.366666666666667], [1.62616818E12, 8.183333333333334], [1.6261629E12, 14.966666666666667], [1.6261683E12, 20.0], [1.6261638E12, 20.0], [1.626168E12, 20.0], [1.6261677E12, 20.35], [1.62616368E12, 20.0], [1.62616812E12, 19.983333333333334], [1.62616782E12, 16.6], [1.62616278E12, 15.483333333333333], [1.62616842E12, 20.0], [1.62616296E12, 15.016666666666667], [1.62616752E12, 3.1], [1.62616764E12, 20.1], [1.62616386E12, 2.7333333333333334], [1.62616356E12, 15.75], [1.62616824E12, 20.2], [1.62616794E12, 20.083333333333332]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62616848E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.3166666666666667, "minX": 1.62616272E12, "maxY": 20.35, "series": [{"data": [[1.62616362E12, 20.0], [1.6261638E12, 20.0], [1.62616368E12, 20.0], [1.62616386E12, 2.7333333333333334], [1.62616356E12, 15.75], [1.62616374E12, 20.0]], "isOverall": false, "label": "network/1/vertx/coroutine-success", "isController": false}, {"data": [[1.62616836E12, 20.0], [1.62616806E12, 20.016666666666666], [1.626168E12, 20.0], [1.62616284E12, 15.016666666666667], [1.6261677E12, 20.35], [1.62616812E12, 19.983333333333334], [1.62616272E12, 1.3166666666666667], [1.62616782E12, 16.6], [1.62616278E12, 15.483333333333333], [1.62616776E12, 20.0], [1.62616842E12, 20.0], [1.62616788E12, 14.316666666666666], [1.62616296E12, 15.016666666666667], [1.62616758E12, 19.816666666666666], [1.62616302E12, 13.7], [1.62616848E12, 17.366666666666667], [1.62616752E12, 3.1], [1.62616818E12, 8.183333333333334], [1.6261629E12, 14.966666666666667], [1.62616764E12, 20.1], [1.6261683E12, 20.0], [1.62616824E12, 20.2], [1.62616794E12, 20.083333333333332]], "isOverall": false, "label": "cpu/1/spring/mvc-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62616848E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.3166666666666667, "minX": 1.62616272E12, "maxY": 20.35, "series": [{"data": [[1.62616836E12, 20.0], [1.62616806E12, 20.016666666666666], [1.62616284E12, 15.016666666666667], [1.62616272E12, 1.3166666666666667], [1.62616776E12, 20.0], [1.62616374E12, 20.0], [1.62616788E12, 14.316666666666666], [1.62616362E12, 20.0], [1.62616758E12, 19.816666666666666], [1.62616302E12, 13.7], [1.62616848E12, 17.366666666666667], [1.62616818E12, 8.183333333333334], [1.6261629E12, 14.966666666666667], [1.6261683E12, 20.0], [1.6261638E12, 20.0], [1.626168E12, 20.0], [1.6261677E12, 20.35], [1.62616368E12, 20.0], [1.62616812E12, 19.983333333333334], [1.62616782E12, 16.6], [1.62616278E12, 15.483333333333333], [1.62616842E12, 20.0], [1.62616296E12, 15.016666666666667], [1.62616752E12, 3.1], [1.62616764E12, 20.1], [1.62616386E12, 2.7333333333333334], [1.62616356E12, 15.75], [1.62616824E12, 20.2], [1.62616794E12, 20.083333333333332]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62616848E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

